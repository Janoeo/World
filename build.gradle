buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// ***************************************** //
//                                           //
//        Standard versioning system         //
//                                           //
// ***************************************** //
def majorVersion = 2
def minorVersion = 0
def buildVersion = 78
def isExperimental = true
version = "${majorVersion}.${minorVersion}.${buildVersion}"
if (isExperimental) {
    version += '-experimental'
}

// ***************************************** //
//                                           //
//         Janoeo versioning system          //
//                                           //
// ***************************************** //
def isJanoeo = true
def janoeoProjectVersion = 6
if (isJanoeo) {
    version = "${janoeoProjectVersion}.${version}"
}

group = 'fr.alasdiablo.janoeo.world'
archivesBaseName = 'Janoeo World'

def manifestAttributes = [
        "Specification-Title"     : "Janoeo Template",
        "Specification-Vendor"    : "AlasDiablo, Safyrus",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   : "AlasDiablo, Safyrus",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

def outputFolder = file(rootProject.getRootDir().getPath() + '/output')

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def deobfSourceClassifier

minecraft {
    mappings channel: 'official', version: '1.18.1'
    deobfSourceClassifier = getMappings().get()
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                janoeo_world {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                janoeo_world {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'janoeo_world', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                janoeo_world {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://www.cursemaven.com/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.5'
    implementation 'curse.maven:diabololib-422014:3571204'          // DiaboloLib
    implementation fg.deobf('curse.maven:catalogue-459701:3559402') // Catalogue
}

jar {
    manifest.attributes(manifestAttributes)
    destinationDirectory.set(file(rootProject.getRootDir().getPath() + '/output'))
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    def archiveName = 'sources-' + deobfSourceClassifier
    archiveClassifier.set(archiveName)
    destinationDirectory.set(outputFolder)
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    def archiveName = 'deobf-' + deobfSourceClassifier
    archiveClassifier.set(archiveName)
    manifest.attributes(manifestAttributes)
    destinationDirectory.set(outputFolder)
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}
